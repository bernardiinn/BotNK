from discord.ext import commands
from utils.db import get_db_connection
import os
import shutil

def setup(bot):
    @bot.command(name="debugdb")
    async def debug_db(ctx):
        try:
            conn = get_db_connection()
            c = conn.cursor()
            c.execute("SELECT id, tipo_acao, resultado, data_hora, dinheiro FROM acoes ORDER BY id DESC LIMIT 5")
            registros = c.fetchall()
            conn.close()

            if not registros:
                await ctx.send("üì≠ Nenhuma a√ß√£o registrada no banco.")
                return

            mensagem = "**üìã √öltimas a√ß√µes registradas:**\n"
            for id_, tipo, resultado, data, dinheiro in registros:
                mensagem += f"‚Ä¢ `#{id_}` | **{tipo}** | {resultado} | {data} | {dinheiro}\n"

            await ctx.send(mensagem[:2000])

        except Exception as e:
            await ctx.send(f"‚ùå Erro ao acessar o banco: `{e}`")

    @bot.command(name="verdb")
    async def ver_db(ctx):
        try:
            conn = get_db_connection()
            c = conn.cursor()

            mensagem = "**üì¶ Banco de Dados - Visualiza√ß√£o R√°pida**\n"

            # A√ß√µes
            c.execute("SELECT id, tipo_acao, resultado, data_hora, dinheiro FROM acoes ORDER BY id DESC LIMIT 5")
            acoes = c.fetchall()
            mensagem += "\n**üóÇÔ∏è √öltimas A√ß√µes (acoes):**\n"
            if acoes:
                for a in acoes:
                    mensagem += f"‚Ä¢ `#{a[0]}` {a[1]} | {a[2]} | {a[3]} | {a[4]}\n"
            else:
                mensagem += "Nenhuma a√ß√£o registrada.\n"

            # Kills
            c.execute("SELECT acao_id, membro_id, kills FROM kills ORDER BY acao_id DESC LIMIT 5")
            kills = c.fetchall()
            mensagem += "\n**üî´ Kills (kills):**\n"
            if kills:
                for k in kills:
                    mensagem += f"‚Ä¢ A√ß√£o #{k[0]} ‚Äî <@{k[1]}> ‚Üí {k[2]} kills\n"
            else:
                mensagem += "Nenhuma kill registrada.\n"

            # Metas
            c.execute("SELECT membro_id, valor, data FROM farm_droga ORDER BY id DESC LIMIT 5")
            metas = c.fetchall()
            mensagem += "\n**üí∏ Farms (farm_droga):**\n"
            if metas:
                for m in metas:
                    mensagem += f"‚Ä¢ <@{m[0]}> ‚Äî {m[1]}K em {m[2]}\n"
            else:
                mensagem += "Nenhum farm registrado.\n"

            conn.close()
            await ctx.send(mensagem[:2000])

        except Exception as e:
            await ctx.send(f"‚ùå Erro ao acessar o banco: `{e}`")

    @bot.command(name="restoredb")
    async def restore_db(ctx):
        if not os.path.exists("relatorio_backup.db"):
            await ctx.send("‚ùå Backup n√£o encontrado (`relatorio_backup.db`).")
            return

        try:
            shutil.copyfile("relatorio_backup.db", "relatorio.db")
            await ctx.send("‚úÖ Banco de dados restaurado com sucesso a partir do backup!")
        except Exception as e:
            await ctx.send(f"‚ùå Erro ao restaurar o banco: `{e}`")
    
    @bot.command(name="ls")
    async def listar_arquivos(ctx):
        try:
            arquivos = os.listdir(".")
            if not arquivos:
                await ctx.send("üìÇ Nenhum arquivo encontrado no diret√≥rio atual.")
                return

            lista_formatada = "\n".join(f"‚Ä¢ `{nome}`" for nome in arquivos)
            await ctx.send(f"üìÅ **Arquivos em `/app`:**\n{lista_formatada[:2000]}")

        except Exception as e:
            await ctx.send(f"‚ùå Erro ao listar arquivos: `{e}`")
